// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  hasAccount       Boolean
  name             String
  email            String       @unique
  Friends          FriendPair[] @relation("Friend")
  friends          FriendPair[] @relation("friend")
  Groups           Group[]      @relation("UsersGroups")
  Activities       Activity[]   @relation("User_Activities")
  PaymentsMade     Payment[]    @relation("PaymentsMade_PaidTo")
  PaymentsReceived Payment[]    @relation("PaymentsReceived_PaidFrom")
  Expenses         Expense[]
  FriendActivities Activity[]   @relation("Friend_FriendActivities")
  Splits           Split[]
  OauthToken       OauthToken?  @relation(fields: [tokenId], references: [id])
  tokenId          Int?         @unique
}

model OauthToken {
  id           Int     @id @default(autoincrement())
  accessToken  String
  idToken      String
  refreshToken String?
  scope        String?
  expiresIn    Int?
  expiresAt    Int?
  sessionState String?
  User         User?
}

model FriendPair {
  User1    User            @relation("Friend", fields: [user1Id], references: [id])
  user1Id  Int
  User2    User            @relation("friend", fields: [user2Id], references: [id])
  user2Id  Int
  Expenses FriendExpense[]

  @@id([user1Id, user2Id])
}

model FriendExpense {
  id               Int        @id @default(autoincrement())
  Friends          FriendPair @relation(fields: [payerId, userOwingMoneyId], references: [user1Id, user2Id])
  payerId          Int
  userOwingMoneyId Int
  amount           Int
}

model Group {
  id       Int        @id @default(autoincrement())
  name     String
  Users    User[]     @relation("UsersGroups")
  Payment  Payment[]
  Expenses Expense[]
  Activity Activity[]
}

// enum ActivityType {
//   edit
//   deletion
// }

// model Activity {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @db.Timestamptz(6)
//   type      ActivityType

//   user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
//   userId Int?

//   deletion Deletion?
//   edit     Edit?
// }

// model Deletion {
//   activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
//   activityId Int      @id

//   table    Table?     @relation(fields: [tableId], references: [id], onDelete: SetNull)
//   tableId  Int?

//   recordId   Json
// }

// model Edit {
//   activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
//   activityId Int      @id

//   oldValue String
//   newValue String

//   attribute    Attribute?     @relation(fields: [attributeId], references: [id], onDelete: SetNull)
//   attributeId  Int?

//   recordId   Json
// }

enum ActivityType {
  createGroup
  updateGroup
  leaveGroup
  deleteGroup
  createPayment
  createExpense
  createFriend
  updateFriend
  deleteFriend
  updateUser
}

model Activity {
  id          Int          @id @default(autoincrement())
  User        User         @relation("User_Activities", fields: [userId], references: [id])
  userId      Int
  type        ActivityType
  // Single Table Inheritance, not the best, but it'll do.
  Group       Group?       @relation(fields: [groupId], references: [id])
  groupId     Int?
  Payment     Payment?     @relation(fields: [paymentId], references: [id])
  paymentId   Int?
  Expense     Expense?     @relation(fields: [expenseId], references: [id])
  expenseId   Int?
  Friend      User?        @relation("Friend_FriendActivities", fields: [friendId], references: [id])
  friendId    Int?
  // This is more of a frontend thing, so we can remove this, but we can also keep it if we want to keep track of the exact activity specifics.
  description String
  timestamp   DateTime     @default(now()) @db.Timestamptz(6)
}

model Payment {
  id         Int        @id @default(autoincrement())
  Group      Group      @relation(fields: [groupId], references: [id])
  groupId    Int
  PaidTo     User       @relation("PaymentsMade_PaidTo", fields: [paidToId], references: [id])
  paidToId   Int
  PaidFrom   User       @relation("PaymentsReceived_PaidFrom", fields: [paidFromId], references: [id])
  paidFromId Int
  amount     Int
  timestamp  DateTime
  Activity   Activity[]
}

model Expense {
  id          Int        @id @default(autoincrement())
  Group       Group      @relation(fields: [groupId], references: [id])
  groupId     Int
  description String
  Payer       User       @relation(fields: [payerId], references: [id])
  payerId     Int
  amount      Int
  Splits      Split[]
  timestamp   DateTime
  Activity    Activity[]
}

model Split {
  id        Int     @id @default(autoincrement())
  Expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId Int
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
}
